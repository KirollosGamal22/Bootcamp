
Operating System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800066  00800066  00000904  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2c  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a1  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b2  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  8a:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
		return Get_Bit(PINC,(PinNum-SIXTEEN));		
	}
	if(PinNum>=TWINTY_FOUR && PinNum<THIRTY_TWO){
		return Get_Bit(PIND,(PinNum-TWINTY_FOUR));		
	}
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	b0 f5       	brcc	.+108    	; 0x112 <DIO_WritePin+0x80>
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	c9 f4       	brne	.+50     	; 0xde <DIO_WritePin+0x4c>
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	4b e3       	ldi	r20, 0x3B	; 59
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	fa 01       	movw	r30, r20
  ba:	40 81       	ld	r20, Z
  bc:	e4 2f       	mov	r30, r20
  be:	49 81       	ldd	r20, Y+1	; 0x01
  c0:	64 2f       	mov	r22, r20
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_WritePin+0x3c>
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_WritePin+0x38>
  d2:	4e 2b       	or	r20, r30
  d4:	f9 01       	movw	r30, r18
  d6:	40 83       	st	Z, r20
  d8:	fc 01       	movw	r30, r24
  da:	40 83       	st	Z, r20
  dc:	e3 c0       	rjmp	.+454    	; 0x2a4 <DIO_WritePin+0x212>
  de:	8b e3       	ldi	r24, 0x3B	; 59
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2b e3       	ldi	r18, 0x3B	; 59
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	4b e3       	ldi	r20, 0x3B	; 59
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	fa 01       	movw	r30, r20
  ec:	40 81       	ld	r20, Z
  ee:	e4 2f       	mov	r30, r20
  f0:	49 81       	ldd	r20, Y+1	; 0x01
  f2:	64 2f       	mov	r22, r20
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_WritePin+0x6e>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_WritePin+0x6a>
 104:	40 95       	com	r20
 106:	4e 23       	and	r20, r30
 108:	f9 01       	movw	r30, r18
 10a:	40 83       	st	Z, r20
 10c:	fc 01       	movw	r30, r24
 10e:	40 83       	st	Z, r20
 110:	c9 c0       	rjmp	.+402    	; 0x2a4 <DIO_WritePin+0x212>
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	08 f4       	brcc	.+2      	; 0x11a <DIO_WritePin+0x88>
 118:	3f c0       	rjmp	.+126    	; 0x198 <DIO_WritePin+0x106>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	e0 f5       	brcc	.+120    	; 0x198 <DIO_WritePin+0x106>
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	e1 f4       	brne	.+56     	; 0x15e <DIO_WritePin+0xcc>
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	28 e3       	ldi	r18, 0x38	; 56
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	48 e3       	ldi	r20, 0x38	; 56
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	fa 01       	movw	r30, r20
 134:	40 81       	ld	r20, Z
 136:	e4 2f       	mov	r30, r20
 138:	49 81       	ldd	r20, Y+1	; 0x01
 13a:	44 2f       	mov	r20, r20
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	ba 01       	movw	r22, r20
 140:	68 50       	subi	r22, 0x08	; 8
 142:	71 09       	sbc	r23, r1
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_WritePin+0xbc>
 14a:	44 0f       	add	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_WritePin+0xb8>
 152:	4e 2b       	or	r20, r30
 154:	f9 01       	movw	r30, r18
 156:	40 83       	st	Z, r20
 158:	fc 01       	movw	r30, r24
 15a:	40 83       	st	Z, r20
 15c:	a3 c0       	rjmp	.+326    	; 0x2a4 <DIO_WritePin+0x212>
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	28 e3       	ldi	r18, 0x38	; 56
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	48 e3       	ldi	r20, 0x38	; 56
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	fa 01       	movw	r30, r20
 16c:	40 81       	ld	r20, Z
 16e:	e4 2f       	mov	r30, r20
 170:	49 81       	ldd	r20, Y+1	; 0x01
 172:	44 2f       	mov	r20, r20
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	ba 01       	movw	r22, r20
 178:	68 50       	subi	r22, 0x08	; 8
 17a:	71 09       	sbc	r23, r1
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_WritePin+0xf4>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_WritePin+0xf0>
 18a:	40 95       	com	r20
 18c:	4e 23       	and	r20, r30
 18e:	f9 01       	movw	r30, r18
 190:	40 83       	st	Z, r20
 192:	fc 01       	movw	r30, r24
 194:	40 83       	st	Z, r20
 196:	86 c0       	rjmp	.+268    	; 0x2a4 <DIO_WritePin+0x212>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	80 31       	cpi	r24, 0x10	; 16
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <DIO_WritePin+0x10e>
 19e:	3f c0       	rjmp	.+126    	; 0x21e <DIO_WritePin+0x18c>
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 31       	cpi	r24, 0x18	; 24
 1a4:	e0 f5       	brcc	.+120    	; 0x21e <DIO_WritePin+0x18c>
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	e1 f4       	brne	.+56     	; 0x1e4 <DIO_WritePin+0x152>
 1ac:	85 e3       	ldi	r24, 0x35	; 53
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	25 e3       	ldi	r18, 0x35	; 53
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	45 e3       	ldi	r20, 0x35	; 53
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	fa 01       	movw	r30, r20
 1ba:	40 81       	ld	r20, Z
 1bc:	e4 2f       	mov	r30, r20
 1be:	49 81       	ldd	r20, Y+1	; 0x01
 1c0:	44 2f       	mov	r20, r20
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	ba 01       	movw	r22, r20
 1c6:	60 51       	subi	r22, 0x10	; 16
 1c8:	71 09       	sbc	r23, r1
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_WritePin+0x142>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_WritePin+0x13e>
 1d8:	4e 2b       	or	r20, r30
 1da:	f9 01       	movw	r30, r18
 1dc:	40 83       	st	Z, r20
 1de:	fc 01       	movw	r30, r24
 1e0:	40 83       	st	Z, r20
 1e2:	60 c0       	rjmp	.+192    	; 0x2a4 <DIO_WritePin+0x212>
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	25 e3       	ldi	r18, 0x35	; 53
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	45 e3       	ldi	r20, 0x35	; 53
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	fa 01       	movw	r30, r20
 1f2:	40 81       	ld	r20, Z
 1f4:	e4 2f       	mov	r30, r20
 1f6:	49 81       	ldd	r20, Y+1	; 0x01
 1f8:	44 2f       	mov	r20, r20
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	ba 01       	movw	r22, r20
 1fe:	60 51       	subi	r22, 0x10	; 16
 200:	71 09       	sbc	r23, r1
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_WritePin+0x17a>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_WritePin+0x176>
 210:	40 95       	com	r20
 212:	4e 23       	and	r20, r30
 214:	f9 01       	movw	r30, r18
 216:	40 83       	st	Z, r20
 218:	fc 01       	movw	r30, r24
 21a:	40 83       	st	Z, r20
 21c:	43 c0       	rjmp	.+134    	; 0x2a4 <DIO_WritePin+0x212>
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	88 31       	cpi	r24, 0x18	; 24
 222:	08 f4       	brcc	.+2      	; 0x226 <DIO_WritePin+0x194>
 224:	3f c0       	rjmp	.+126    	; 0x2a4 <DIO_WritePin+0x212>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	e0 f5       	brcc	.+120    	; 0x2a4 <DIO_WritePin+0x212>
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	e1 f4       	brne	.+56     	; 0x26a <DIO_WritePin+0x1d8>
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	22 e3       	ldi	r18, 0x32	; 50
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	42 e3       	ldi	r20, 0x32	; 50
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	fa 01       	movw	r30, r20
 240:	40 81       	ld	r20, Z
 242:	e4 2f       	mov	r30, r20
 244:	49 81       	ldd	r20, Y+1	; 0x01
 246:	44 2f       	mov	r20, r20
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	ba 01       	movw	r22, r20
 24c:	68 51       	subi	r22, 0x18	; 24
 24e:	71 09       	sbc	r23, r1
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_WritePin+0x1c8>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_WritePin+0x1c4>
 25e:	4e 2b       	or	r20, r30
 260:	f9 01       	movw	r30, r18
 262:	40 83       	st	Z, r20
 264:	fc 01       	movw	r30, r24
 266:	40 83       	st	Z, r20
 268:	1d c0       	rjmp	.+58     	; 0x2a4 <DIO_WritePin+0x212>
 26a:	82 e3       	ldi	r24, 0x32	; 50
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	22 e3       	ldi	r18, 0x32	; 50
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	42 e3       	ldi	r20, 0x32	; 50
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	fa 01       	movw	r30, r20
 278:	40 81       	ld	r20, Z
 27a:	e4 2f       	mov	r30, r20
 27c:	49 81       	ldd	r20, Y+1	; 0x01
 27e:	44 2f       	mov	r20, r20
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	ba 01       	movw	r22, r20
 284:	68 51       	subi	r22, 0x18	; 24
 286:	71 09       	sbc	r23, r1
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_WritePin+0x200>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_WritePin+0x1fc>
 296:	40 95       	com	r20
 298:	4e 23       	and	r20, r30
 29a:	f9 01       	movw	r30, r18
 29c:	40 83       	st	Z, r20
 29e:	fc 01       	movw	r30, r24
 2a0:	40 83       	st	Z, r20
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <DIO_WritePin+0x212>
 2a4:	00 00       	nop
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <DIO_SetPinDirection+0x6>
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	6a 83       	std	Y+2, r22	; 0x02
	 if(PinNum>=ZERO && PinNum<EIGHT){
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	b0 f5       	brcc	.+108    	; 0x330 <DIO_SetPinDirection+0x80>
		if(PinDirection==HIGH)
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	c9 f4       	brne	.+50     	; 0x2fc <DIO_SetPinDirection+0x4c>
			{
				DDRA=Set_Bit(DDRA,PinNum);
 2ca:	8a e3       	ldi	r24, 0x3A	; 58
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2a e3       	ldi	r18, 0x3A	; 58
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	4a e3       	ldi	r20, 0x3A	; 58
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	fa 01       	movw	r30, r20
 2d8:	40 81       	ld	r20, Z
 2da:	e4 2f       	mov	r30, r20
 2dc:	49 81       	ldd	r20, Y+1	; 0x01
 2de:	64 2f       	mov	r22, r20
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinDirection+0x3c>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinDirection+0x38>
 2f0:	4e 2b       	or	r20, r30
 2f2:	f9 01       	movw	r30, r18
 2f4:	40 83       	st	Z, r20
 2f6:	fc 01       	movw	r30, r24
 2f8:	40 83       	st	Z, r20
			else
			{
				DDRD=Clear_Bit(DDRD,(PinNum-TWINTY_FOUR));
			}
	}
}
 2fa:	e3 c0       	rjmp	.+454    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				DDRA=Set_Bit(DDRA,PinNum);
			}
			else
			{
				DDRA=Clear_Bit(DDRA,PinNum);
 2fc:	8a e3       	ldi	r24, 0x3A	; 58
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	2a e3       	ldi	r18, 0x3A	; 58
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	4a e3       	ldi	r20, 0x3A	; 58
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	fa 01       	movw	r30, r20
 30a:	40 81       	ld	r20, Z
 30c:	e4 2f       	mov	r30, r20
 30e:	49 81       	ldd	r20, Y+1	; 0x01
 310:	64 2f       	mov	r22, r20
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_SetPinDirection+0x6e>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_SetPinDirection+0x6a>
 322:	40 95       	com	r20
 324:	4e 23       	and	r20, r30
 326:	f9 01       	movw	r30, r18
 328:	40 83       	st	Z, r20
 32a:	fc 01       	movw	r30, r24
 32c:	40 83       	st	Z, r20
			else
			{
				DDRD=Clear_Bit(DDRD,(PinNum-TWINTY_FOUR));
			}
	}
}
 32e:	c9 c0       	rjmp	.+402    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			}
	}
	
		
	
	else if(PinNum>=EIGHT && PinNum<SIXTEEN){
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	08 f4       	brcc	.+2      	; 0x338 <DIO_SetPinDirection+0x88>
 336:	3f c0       	rjmp	.+126    	; 0x3b6 <DIO_SetPinDirection+0x106>
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	80 31       	cpi	r24, 0x10	; 16
 33c:	e0 f5       	brcc	.+120    	; 0x3b6 <DIO_SetPinDirection+0x106>
		if(PinDirection==HIGH)
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	e1 f4       	brne	.+56     	; 0x37c <DIO_SetPinDirection+0xcc>
			{
				DDRB=Set_Bit(DDRB,(PinNum-EIGHT));
 344:	87 e3       	ldi	r24, 0x37	; 55
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	27 e3       	ldi	r18, 0x37	; 55
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	47 e3       	ldi	r20, 0x37	; 55
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	fa 01       	movw	r30, r20
 352:	40 81       	ld	r20, Z
 354:	e4 2f       	mov	r30, r20
 356:	49 81       	ldd	r20, Y+1	; 0x01
 358:	44 2f       	mov	r20, r20
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	ba 01       	movw	r22, r20
 35e:	68 50       	subi	r22, 0x08	; 8
 360:	71 09       	sbc	r23, r1
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_SetPinDirection+0xbc>
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_SetPinDirection+0xb8>
 370:	4e 2b       	or	r20, r30
 372:	f9 01       	movw	r30, r18
 374:	40 83       	st	Z, r20
 376:	fc 01       	movw	r30, r24
 378:	40 83       	st	Z, r20
	}
	
		
	
	else if(PinNum>=EIGHT && PinNum<SIXTEEN){
		if(PinDirection==HIGH)
 37a:	a3 c0       	rjmp	.+326    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				DDRB=Set_Bit(DDRB,(PinNum-EIGHT));
			}
			else
			{
				DDRB=Clear_Bit(DDRB,(PinNum-EIGHT));
 37c:	87 e3       	ldi	r24, 0x37	; 55
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	27 e3       	ldi	r18, 0x37	; 55
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	47 e3       	ldi	r20, 0x37	; 55
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	fa 01       	movw	r30, r20
 38a:	40 81       	ld	r20, Z
 38c:	e4 2f       	mov	r30, r20
 38e:	49 81       	ldd	r20, Y+1	; 0x01
 390:	44 2f       	mov	r20, r20
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	ba 01       	movw	r22, r20
 396:	68 50       	subi	r22, 0x08	; 8
 398:	71 09       	sbc	r23, r1
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0xf4>
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0xf0>
 3a8:	40 95       	com	r20
 3aa:	4e 23       	and	r20, r30
 3ac:	f9 01       	movw	r30, r18
 3ae:	40 83       	st	Z, r20
 3b0:	fc 01       	movw	r30, r24
 3b2:	40 83       	st	Z, r20
	}
	
		
	
	else if(PinNum>=EIGHT && PinNum<SIXTEEN){
		if(PinDirection==HIGH)
 3b4:	86 c0       	rjmp	.+268    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			else
			{
				DDRB=Clear_Bit(DDRB,(PinNum-EIGHT));
			}
	}
	else if(PinNum>=SIXTEEN && PinNum<TWINTY_FOUR){
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	80 31       	cpi	r24, 0x10	; 16
 3ba:	08 f4       	brcc	.+2      	; 0x3be <DIO_SetPinDirection+0x10e>
 3bc:	3f c0       	rjmp	.+126    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 31       	cpi	r24, 0x18	; 24
 3c2:	e0 f5       	brcc	.+120    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		if(PinDirection==HIGH)
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	e1 f4       	brne	.+56     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			{
				DDRC=Set_Bit(DDRC,(PinNum-SIXTEEN));
 3ca:	84 e3       	ldi	r24, 0x34	; 52
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	24 e3       	ldi	r18, 0x34	; 52
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	44 e3       	ldi	r20, 0x34	; 52
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	fa 01       	movw	r30, r20
 3d8:	40 81       	ld	r20, Z
 3da:	e4 2f       	mov	r30, r20
 3dc:	49 81       	ldd	r20, Y+1	; 0x01
 3de:	44 2f       	mov	r20, r20
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	ba 01       	movw	r22, r20
 3e4:	60 51       	subi	r22, 0x10	; 16
 3e6:	71 09       	sbc	r23, r1
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinDirection+0x142>
 3ee:	44 0f       	add	r20, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinDirection+0x13e>
 3f6:	4e 2b       	or	r20, r30
 3f8:	f9 01       	movw	r30, r18
 3fa:	40 83       	st	Z, r20
 3fc:	fc 01       	movw	r30, r24
 3fe:	40 83       	st	Z, r20
			{
				DDRB=Clear_Bit(DDRB,(PinNum-EIGHT));
			}
	}
	else if(PinNum>=SIXTEEN && PinNum<TWINTY_FOUR){
		if(PinDirection==HIGH)
 400:	60 c0       	rjmp	.+192    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				DDRC=Set_Bit(DDRC,(PinNum-SIXTEEN));
			}
			else
			{
				DDRC=Clear_Bit(DDRC,(PinNum-SIXTEEN));
 402:	84 e3       	ldi	r24, 0x34	; 52
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	24 e3       	ldi	r18, 0x34	; 52
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	44 e3       	ldi	r20, 0x34	; 52
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	fa 01       	movw	r30, r20
 410:	40 81       	ld	r20, Z
 412:	e4 2f       	mov	r30, r20
 414:	49 81       	ldd	r20, Y+1	; 0x01
 416:	44 2f       	mov	r20, r20
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	ba 01       	movw	r22, r20
 41c:	60 51       	subi	r22, 0x10	; 16
 41e:	71 09       	sbc	r23, r1
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	40 95       	com	r20
 430:	4e 23       	and	r20, r30
 432:	f9 01       	movw	r30, r18
 434:	40 83       	st	Z, r20
 436:	fc 01       	movw	r30, r24
 438:	40 83       	st	Z, r20
			{
				DDRB=Clear_Bit(DDRB,(PinNum-EIGHT));
			}
	}
	else if(PinNum>=SIXTEEN && PinNum<TWINTY_FOUR){
		if(PinDirection==HIGH)
 43a:	43 c0       	rjmp	.+134    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			else
			{
				DDRC=Clear_Bit(DDRC,(PinNum-SIXTEEN));
			}
	}
	else if(PinNum>= TWINTY_FOUR && PinNum<THIRTY_TWO){
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	88 31       	cpi	r24, 0x18	; 24
 440:	08 f4       	brcc	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	3f c0       	rjmp	.+126    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	80 32       	cpi	r24, 0x20	; 32
 448:	e0 f5       	brcc	.+120    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		if(PinDirection==HIGH)
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	e1 f4       	brne	.+56     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			{
				DDRD=Set_Bit(DDRD,(PinNum-TWINTY_FOUR));
 450:	81 e3       	ldi	r24, 0x31	; 49
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	21 e3       	ldi	r18, 0x31	; 49
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	41 e3       	ldi	r20, 0x31	; 49
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	fa 01       	movw	r30, r20
 45e:	40 81       	ld	r20, Z
 460:	e4 2f       	mov	r30, r20
 462:	49 81       	ldd	r20, Y+1	; 0x01
 464:	44 2f       	mov	r20, r20
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	ba 01       	movw	r22, r20
 46a:	68 51       	subi	r22, 0x18	; 24
 46c:	71 09       	sbc	r23, r1
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	44 0f       	add	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 47c:	4e 2b       	or	r20, r30
 47e:	f9 01       	movw	r30, r18
 480:	40 83       	st	Z, r20
 482:	fc 01       	movw	r30, r24
 484:	40 83       	st	Z, r20
			else
			{
				DDRD=Clear_Bit(DDRD,(PinNum-TWINTY_FOUR));
			}
	}
}
 486:	1d c0       	rjmp	.+58     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				DDRD=Set_Bit(DDRD,(PinNum-TWINTY_FOUR));
			}
			else
			{
				DDRD=Clear_Bit(DDRD,(PinNum-TWINTY_FOUR));
 488:	81 e3       	ldi	r24, 0x31	; 49
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	21 e3       	ldi	r18, 0x31	; 49
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	41 e3       	ldi	r20, 0x31	; 49
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	fa 01       	movw	r30, r20
 496:	40 81       	ld	r20, Z
 498:	e4 2f       	mov	r30, r20
 49a:	49 81       	ldd	r20, Y+1	; 0x01
 49c:	44 2f       	mov	r20, r20
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	ba 01       	movw	r22, r20
 4a2:	68 51       	subi	r22, 0x18	; 24
 4a4:	71 09       	sbc	r23, r1
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b4:	40 95       	com	r20
 4b6:	4e 23       	and	r20, r30
 4b8:	f9 01       	movw	r30, r18
 4ba:	40 83       	st	Z, r20
 4bc:	fc 01       	movw	r30, r24
 4be:	40 83       	st	Z, r20
			}
	}
}
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c2:	00 00       	nop
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <main>:

#include <avr/io.h>
#include "scheduler/scheduler.h"

int main(void)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(12,1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinDirection>
	DIO_SetPinDirection(13,1);
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	8d e0       	ldi	r24, 0x0D	; 13
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinDirection>
	DIO_SetPinDirection(14,1);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	8e e0       	ldi	r24, 0x0E	; 14
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinDirection>
	scheduler_init_start();
 4fa:	0e 94 80 02 	call	0x500	; 0x500 <scheduler_init_start>
    /* Replace with your application code */
    while (1) 
    {
	
    }
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <main+0x30>

00000500 <scheduler_init_start>:
extern flag;	
#define TRUE 1
#define FALSE 0
#define ZERO 0
/*scheduler init and start function*/
void scheduler_init_start(void){
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
	timer0_init(PRESCALLER_64);
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <timer0_init>
	timer0_CM_inter_enable();
 50e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <timer0_CM_inter_enable>
	enable_global_inter();
 512:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <enable_global_inter>
	timer0_start();
 516:	0e 94 cb 03 	call	0x796	; 0x796 <timer0_start>
	set_callback(set_flag);
 51a:	8c ea       	ldi	r24, 0xAC	; 172
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	0e 94 99 02 	call	0x532	; 0x532 <set_callback>
	prefilled(tasks);
 522:	80 e6       	ldi	r24, 0x60	; 96
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 ba 02 	call	0x574	; 0x574 <prefilled>
	
}
 52a:	00 00       	nop
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <set_callback>:
void set_callback(void (*ptr)(void)){
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	00 d0       	rcall	.+0      	; 0x538 <set_callback+0x6>
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	9a 83       	std	Y+2, r25	; 0x02
 53e:	89 83       	std	Y+1, r24	; 0x01
	callback_func=ptr;
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	9a 81       	ldd	r25, Y+2	; 0x02
 544:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <callback_func+0x1>
 548:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <callback_func>
}
 54c:	00 00       	nop
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <set_flag>:
void set_flag(){
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
	flag=TRUE;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prescaller_t>
 568:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <flag>
}
 56c:	00 00       	nop
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <prefilled>:

/*prefilled function*/
void prefilled (tasktype tasks[]){
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <prefilled+0x6>
 57a:	1f 92       	push	r1
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	9b 83       	std	Y+3, r25	; 0x03
 582:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	while (1){
		
		if(flag==TRUE){
 584:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag>
 588:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prescaller_t>
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	d1 f7       	brne	.-12     	; 0x584 <prefilled+0x10>
			flag=FALSE;
 590:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <prescaller_t>
 594:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag>
			for (i=ZERO;i<NUM_TASKS;i++)
 598:	19 82       	std	Y+1, r1	; 0x01
 59a:	13 c0       	rjmp	.+38     	; 0x5c2 <prefilled+0x4e>
			{
					increase_count();	
 59c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <increase_count>
					tasks[i]();	
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	2a 81       	ldd	r18, Y+2	; 0x02
 5ac:	3b 81       	ldd	r19, Y+3	; 0x03
 5ae:	82 0f       	add	r24, r18
 5b0:	93 1f       	adc	r25, r19
 5b2:	fc 01       	movw	r30, r24
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	fc 01       	movw	r30, r24
 5ba:	09 95       	icall
	uint8 i;
	while (1){
		
		if(flag==TRUE){
			flag=FALSE;
			for (i=ZERO;i<NUM_TASKS;i++)
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	50 f3       	brcs	.-44     	; 0x59c <prefilled+0x28>
			{
					increase_count();	
					tasks[i]();	
			}
		}
	}
 5c8:	dd cf       	rjmp	.-70     	; 0x584 <prefilled+0x10>

000005ca <increase_count>:
	
}
void increase_count(void){
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	count++;
 5d2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 5d6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 5e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
 5e4:	00 00       	nop
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <LED1_on>:
#define THREE_SEC 3000
#define FOUR_SEC 4000
#define FIVE_SEC 5000
#define SIX_SEC 6000

void LED1_on(void){
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62

if(count<ONE_SEC){
 5f4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 5f8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 5fc:	88 3e       	cpi	r24, 0xE8	; 232
 5fe:	93 40       	sbci	r25, 0x03	; 3
 600:	64 f4       	brge	.+24     	; 0x61a <LED1_on+0x2e>


DIO_WritePin(LED1,HIGH);
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	8c e0       	ldi	r24, 0x0C	; 12
 606:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
DIO_WritePin(LED2,LOW);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	8d e0       	ldi	r24, 0x0D	; 13
 60e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
DIO_WritePin(LED3,LOW);
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	8e e0       	ldi	r24, 0x0E	; 14
 616:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>

}
}
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <LED2_on>:

void LED2_on(void){
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	if (count>ONE_SEC && count<= THREE_SEC)
 62a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 62e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 632:	89 3e       	cpi	r24, 0xE9	; 233
 634:	93 40       	sbci	r25, 0x03	; 3
 636:	9c f0       	brlt	.+38     	; 0x65e <LED2_on+0x3c>
 638:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 63c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 640:	89 3b       	cpi	r24, 0xB9	; 185
 642:	9b 40       	sbci	r25, 0x0B	; 11
 644:	64 f4       	brge	.+24     	; 0x65e <LED2_on+0x3c>
	{
	DIO_WritePin(LED1,LOW);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	8c e0       	ldi	r24, 0x0C	; 12
 64a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);	
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	8e e0       	ldi	r24, 0x0E	; 14
 652:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,HIGH);
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	8d e0       	ldi	r24, 0x0D	; 13
 65a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
}
 65e:	00 00       	nop
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <LED3_on>:

void LED3_on(void){
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
	if(count>THREE_SEC && count< SIX_SEC){
 66e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 672:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 676:	89 3b       	cpi	r24, 0xB9	; 185
 678:	9b 40       	sbci	r25, 0x0B	; 11
 67a:	9c f0       	brlt	.+38     	; 0x6a2 <LED3_on+0x3c>
 67c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 680:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 684:	80 37       	cpi	r24, 0x70	; 112
 686:	97 41       	sbci	r25, 0x17	; 23
 688:	64 f4       	brge	.+24     	; 0x6a2 <LED3_on+0x3c>
	DIO_WritePin(LED1,LOW);
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	8c e0       	ldi	r24, 0x0C	; 12
 68e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	8d e0       	ldi	r24, 0x0D	; 13
 696:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,HIGH);
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	8e e0       	ldi	r24, 0x0E	; 14
 69e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	}
	if(count==SIX_SEC){
 6a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 6a6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 6aa:	80 37       	cpi	r24, 0x70	; 112
 6ac:	97 41       	sbci	r25, 0x17	; 23
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <LED3_on+0x52>
		count=ZERO;
 6b0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
 6b4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>

	}
	
	}
 6b8:	00 00       	nop
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <timer0_init>:
*Description :                                                          *
*function to enable external interrupt two                              *
************************************************************************/
void enable_external_int2(void){
	GICR|=(1<<5);
}
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	1f 92       	push	r1
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	83 e5       	ldi	r24, 0x53	; 83
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	28 e0       	ldi	r18, 0x08	; 8
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	82 e5       	ldi	r24, 0x52	; 82
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	10 82       	st	Z, r1
 6de:	8c e5       	ldi	r24, 0x5C	; 92
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	29 ef       	ldi	r18, 0xF9	; 249
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer0_Prescaller>
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	69 f4       	brne	.+26     	; 0x70e <timer0_init+0x4e>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	a0 e0       	ldi	r26, 0x00	; 0
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <prescaller_t>
 700:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <prescaller_t+0x1>
 704:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <prescaller_t+0x2>
 708:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <prescaller_t+0x3>
 70c:	3f c0       	rjmp	.+126    	; 0x78c <timer0_init+0xcc>
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	69 f4       	brne	.+26     	; 0x72e <timer0_init+0x6e>
 714:	88 e0       	ldi	r24, 0x08	; 8
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	a0 e0       	ldi	r26, 0x00	; 0
 71a:	b0 e0       	ldi	r27, 0x00	; 0
 71c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <prescaller_t>
 720:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <prescaller_t+0x1>
 724:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <prescaller_t+0x2>
 728:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <prescaller_t+0x3>
 72c:	2f c0       	rjmp	.+94     	; 0x78c <timer0_init+0xcc>
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	83 30       	cpi	r24, 0x03	; 3
 732:	69 f4       	brne	.+26     	; 0x74e <timer0_init+0x8e>
 734:	80 e4       	ldi	r24, 0x40	; 64
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	a0 e0       	ldi	r26, 0x00	; 0
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <prescaller_t>
 740:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <prescaller_t+0x1>
 744:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <prescaller_t+0x2>
 748:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <prescaller_t+0x3>
 74c:	1f c0       	rjmp	.+62     	; 0x78c <timer0_init+0xcc>
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	84 30       	cpi	r24, 0x04	; 4
 752:	69 f4       	brne	.+26     	; 0x76e <timer0_init+0xae>
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	a0 e0       	ldi	r26, 0x00	; 0
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <prescaller_t>
 760:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <prescaller_t+0x1>
 764:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <prescaller_t+0x2>
 768:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <prescaller_t+0x3>
 76c:	0f c0       	rjmp	.+30     	; 0x78c <timer0_init+0xcc>
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	85 30       	cpi	r24, 0x05	; 5
 772:	61 f4       	brne	.+24     	; 0x78c <timer0_init+0xcc>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	94 e0       	ldi	r25, 0x04	; 4
 778:	a0 e0       	ldi	r26, 0x00	; 0
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <prescaller_t>
 780:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <prescaller_t+0x1>
 784:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <prescaller_t+0x2>
 788:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <prescaller_t+0x3>
 78c:	00 00       	nop
 78e:	0f 90       	pop	r0
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <timer0_start>:
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	83 e5       	ldi	r24, 0x53	; 83
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	23 e5       	ldi	r18, 0x53	; 83
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	f9 01       	movw	r30, r18
 7a8:	20 81       	ld	r18, Z
 7aa:	32 2f       	mov	r19, r18
 7ac:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <timer0_Prescaller>
 7b0:	27 70       	andi	r18, 0x07	; 7
 7b2:	23 2b       	or	r18, r19
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 83       	st	Z, r18
 7b8:	00 00       	nop
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <enable_global_inter>:
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
 7c8:	8f e5       	ldi	r24, 0x5F	; 95
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	2f e5       	ldi	r18, 0x5F	; 95
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	f9 01       	movw	r30, r18
 7d2:	20 81       	ld	r18, Z
 7d4:	20 68       	ori	r18, 0x80	; 128
 7d6:	fc 01       	movw	r30, r24
 7d8:	20 83       	st	Z, r18
 7da:	00 00       	nop
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <timer0_CM_inter_enable>:
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	89 e5       	ldi	r24, 0x59	; 89
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	29 e5       	ldi	r18, 0x59	; 89
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 81       	ld	r18, Z
 7f6:	22 60       	ori	r18, 0x02	; 2
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
 7fc:	00 00       	nop
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <__vector_10>:
ISR(TIMER0_COMP_vect){
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 80c:	0f 92       	push	r0
 80e:	11 24       	eor	r1, r1
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
	callback_func();
 830:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <callback_func>
 834:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <callback_func+0x1>
 838:	fc 01       	movw	r30, r24
 83a:	09 95       	icall
	
 83c:	00 00       	nop
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
